// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Softeq.NetKit.Integrations.EventLog;

namespace Softeq.NetKit.Integrations.EventLog.Migrations
{
    [DbContext(typeof(IntegrationEventLogContext))]
    partial class IntegrationEventLogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Softeq.NetKit.Integrations.EventLog.EventState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EventState");

                    b.HasData(
                        new { Id = 1, Name = "Published" },
                        new { Id = 3, Name = "Completed" },
                        new { Id = 2, Name = "PublishedFailed" },
                        new { Id = 0, Name = "NotPublished" }
                    );
                });

            modelBuilder.Entity("Softeq.NetKit.Integrations.EventLog.IntegrationEventLog", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreationTime");

                    b.Property<DateTimeOffset?>("UpdatedTime");

                    b.Property<string>("EventTypeName")
                        .IsRequired();

                    b.Property<int>("StateId");

                    b.Property<int>("TimesSent");

                    b.HasKey("EventId");

                    b.HasIndex("StateId");

                    b.ToTable("IntegrationEventLogs");
                });

            modelBuilder.Entity("Softeq.NetKit.Integrations.EventLog.IntegrationEventLog", b =>
                {
                    b.HasOne("Softeq.NetKit.Integrations.EventLog.EventState", "State")
                        .WithMany("EventLogs")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
